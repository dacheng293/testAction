name: Continuous-Integration

on:
  push:
    branches:
      - master
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  build-and-test:
    runs-on: macos-latest
    strategy:
      matrix:
        go-version: [1.21.1]  # Add more Go versions if needed
        os: [macos-latest]  # Add more operating systems if needed
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go-version }}
        # Setting up a specific version of Go for consistency and reproducibility

      - name: Cache Go modules
        uses: actions/cache@v2
        with:
          path: |
            ~/go/pkg/mod
            ~/Library/Caches/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
        # Caching dependencies to speed up the build process

      - name: Run unit tests
        run: go test ./...

      - name: Cross compile binaries
        env:
          GO_LDFLAGS: "-s -w -X 'main.ApiVersion=${{env.API_VERSION}}' -X 'main.Version=${{github.ref_name}}' -X 'main.BuildDate=${{github.event.repository.updated_at}}' -X 'main.Commit=${{github.sha}}' -X 'main.ReleaseUrl=https://api.github.com/${{github.repository}}'"
        run: |
          GOOS=darwin GOARCH=amd64 CGO_ENABLED=0 go build -ldflags "$GO_LDFLAGS" -o vcr_darwin_amd64 .
          GOOS=darwin GOARCH=arm64 CGO_ENABLED=0 go build -ldflags "$GO_LDFLAGS" -o vcr_darwin_arm64 .
          GOOS=linux GOARCH=arm64 CGO_ENABLED=0 go build -ldflags "$GO_LDFLAGS" -o vcr_linux_arm64 .
          GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags "$GO_LDFLAGS" -o vcr_linux_amd64 .
          GOOS=windows GOARCH=amd64 CGO_ENABLED=0 go build -ldflags "$GO_LDFLAGS" -o vcr_windows_amd64.exe .