name: Release CLI
on:
  push:
    tags:
      - '*'

jobs:
  build-and-release:
    runs-on: macos-latest
    strategy:
      matrix:
        go-version: [1.21.1]  # Add more Go versions if needed
        os: [macos-latest]  # Add more operating systems if needed

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go-version }}
        # Setting up a specific version of Go for consistency and reproducibility

      - name: Cache Go modules
        uses: actions/cache@v2
        with:
          path: |
            ~/go/pkg/mod
            ~/Library/Caches/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
        # Caching dependencies to speed up the build process

      - name: Run unit tests
        run: go test ./...

      - name: Cross compile binaries
        env:
          VERSION: ${{ vars.API_VERSION }}
          GO_LDFLAGS: "-s -w -X 'github.com/dacheng293/testAction/main.apiVersion=${VERSION}' -X 'github.com/dacheng293/testAction/main.version=${{github.ref_name}}' -X 'github.com/dacheng293/testAction/main.buildDate=${{github.event.repository.updated_at}}' -X 'github.com/dacheng293/testAction/main.commit=${{github.sha}}' -X 'github.com/dacheng293/testAction/main.releaseUrl=https://api.github.com/${{github.repository}}'"
        run: |
          GOOS=darwin GOARCH=amd64 CGO_ENABLED=0 go build -ldflags "$GO_LDFLAGS" -o vcr_darwin_amd64 .
          GOOS=darwin GOARCH=arm64 CGO_ENABLED=0 go build -ldflags "$GO_LDFLAGS" -o vcr_darwin_arm64 .
          GOOS=linux GOARCH=arm64 CGO_ENABLED=0 go build -ldflags "$GO_LDFLAGS" -o vcr_linux_arm64 .
          GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags "$GO_LDFLAGS" -o vcr_linux_amd64 .
          GOOS=windows GOARCH=amd64 CGO_ENABLED=0 go build -ldflags "$GO_LDFLAGS" -o vcr_windows_amd64.exe .

      - name: Compress binaries
        run: |
          mkdir bin
          tar czf bin/vcr_darwin_amd64.tar.gz ./vcr_darwin_amd64
          tar czf bin/vcr_darwin_arm64.tar.gz ./vcr_darwin_arm64
          tar czf bin/vcr_linux_arm64.tar.gz ./vcr_linux_arm64
          tar czf bin/vcr_linux_amd64.tar.gz ./vcr_linux_amd64
          tar czf bin/vcr_windows_amd64.tar.gz ./vcr_windows_amd64.exe

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
        # Creating a GitHub release for the tagged commit
#
#      - name: Upload Release Asset
#        uses: actions/upload-release-asset@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          upload_url: ${{ steps.create_release.outputs.upload_url }}
#          asset_path: ./bin/vcr_darwin_amd64.tar.gz
#          asset_name: vcr_darwin_amd64.tar.gz
#          asset_content_type: application/gzip
#        # Uploading the binary as a release asset
#        # Repeat this step for each binary
#
#      - name: Notify Slack on Failure
#        if: failure()
#        uses: rtCamp/action-slack-notify@v2
#        env:
#          SLACK_CHANNEL: your-slack-channel
#          SLACK_COLOR: 'danger'
#          SLACK_MESSAGE: 'Build failed: ${{ github.ref }}'
#          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
#        # Sending a notification to Slack if the build fails
